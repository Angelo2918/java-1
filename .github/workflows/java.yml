name: Java

on:
  pull_request:
    paths:
      - "**/*.java"
      - "**/*.gradle"
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Check if tests compile cleanly with starter sources
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - name: Set up JDK 1.17
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93
        with:
          java-version: 17
          distribution: "temurin"
      - name: Check if tests compile cleanly with starter sources
        run: ./gradlew compileStarterTestJava --continue
        working-directory: exercises

  lint:
    name: Lint Java files using Checkstyle
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - name: Set up JDK 1.17
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93
        with:
          java-version: 17
          distribution: "temurin"
      - name: Run checkstyle
        run: ./gradlew check --exclude-task test --continue
        working-directory: exercises

  test:
    name: Test all exercises using java-test-runner
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - name: Test all exercises using java-test-runner
        run: bin/test-with-test-runner
      - name: Create test summary
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          script: |
            const fs = require('node:fs/promises')
            const globber = await glob.create('exercises/**/build/results.json')
            for await (const file of globber.globGenerator()) {
              const data = await fs.readFile(file, 'utf8')
              const results = JSON.parse(data)

              if (results.status === 'error') {
                core.error(results.message, {title: `Error while running tests`});
                continue;
              }

              for (const test of results.tests) {
                switch (test.status) {
                  case "pass":
                    core.info(`Test passed: ${test.name}`);
                    break;
                  case "fail":
                    core.warning(test.message, {title: `Test failed: ${test.name}`});
                    break;
                  case "error":
                    core.warning(test.message, {title: `Test errored: ${test.name}`});
                    break;
                }
              }
            }
